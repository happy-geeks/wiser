@use "../vars/index" as vars;

@mixin responsive-df {
    $grid-responsive: 0;
    $breakpoint-letters: df;
    @include responsive-grid($grid-responsive, $breakpoint-letters);
}

@mixin responsive-sm {
    $grid-responsive: vars.$sizes-screen-sm-min;
    $breakpoint-letters: sm;
    @include responsive-grid($grid-responsive, $breakpoint-letters);
}

@mixin responsive-md {
    $grid-responsive: vars.$sizes-screen-md-min;
    $breakpoint-letters: md;
    @include responsive-grid($grid-responsive, $breakpoint-letters);
}

@mixin responsive-lg {
    $grid-responsive: vars.$sizes-screen-lg-min;
    $breakpoint-letters: lg;
    @include responsive-grid($grid-responsive, $breakpoint-letters);
}

@mixin responsive-xl {
    $grid-responsive: vars.$sizes-screen-xl-min;
    $breakpoint-letters: xl;
    @include responsive-grid($grid-responsive, $breakpoint-letters);
}

@mixin responsive-grid($grid-responsive, $breakpoint) {
    @media (min-width: #{$grid-responsive}) {
        @for $i from 1 through vars.$sizes-column-count {
            $col-devide: calc(#{vars.$sizes-column-count} / #{$i});
            $col-width: calc(100% / #{$col-devide});

            .col-#{$breakpoint}-#{$i} {
                flex-basis: calc(#{$col-width} - #{vars.$sizes-gutter-width});
                max-width: calc(#{$col-width} - #{vars.$sizes-gutter-width});
            }
        }
    }
}

//// DO NOT MODIFY BELOW
.container {
    position: relative;
    box-sizing: border-box;
    width: 100%;
    max-width: vars.$sizes-base-width + vars.$sizes-gutter-width;
    margin: auto;

    .row {
        display: flex;
        flex-wrap: wrap;
        width: 100%;
        padding: calc(#{vars.$sizes-gutter-width} / 2);

        > .col {
            flex: 0 0 calc(100% - #{vars.$sizes-gutter-width});
            max-width: calc(100% - #{vars.$sizes-gutter-width});
            margin: calc(#{vars.$sizes-gutter-width} / 2);

            $margin-width: calc(#{vars.$sizes-gutter-width} / 2);
            $negative-margin-width: calc(-#{vars.$sizes-gutter-width} / 2);

            .row {
                /* NESTED */
                margin-top: $negative-margin-width;
                margin-left: $negative-margin-width;
                padding: 0;
                width: calc(100% + #{vars.$sizes-gutter-width});
            }
        }

        @for $i from 1 through vars.$sizes-column-count {
            $col-devide: calc(#{vars.$sizes-column-count} / #{$i});
            $col-width: calc(100% / #{$col-devide});

            .col-#{$i} {
                flex-basis: calc(#{$col-width} - #{vars.$sizes-gutter-width});
                max-width: calc(#{$col-width} - #{vars.$sizes-gutter-width});
            }
        }

        @include responsive-df;
        @include responsive-sm;
        @include responsive-md;
        @include responsive-lg;
        @include responsive-xl;
    }

    .row,
    .col {
        &.no-margin {
            margin-top: 0;
            margin-bottom: 0;
        }

        &.no-top-margin {
            margin-top: 0;
        }

        &.no-bottom-margin {
            margin-bottom: 0;
        }

        &.no-padding {
            padding-top: 0;
            padding-bottom: 0;
        }

        &.no-top-padding {
            padding-top: 0;
        }

        &.no-bottom-padding {
            padding-bottom: 0;
        }

        &.flex-center {
            justify-content: center;
        }
    }
}