@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@using GeeksCoreLibrary.Modules.Templates.Enums
@model Api.Modules.Templates.Models.Template.TemplateSettingsModel
<div class="item full-width" data-label-style="float" data-label-width="0">
    <h4><label for="cacheMinutes">@Localizer["URL Regex"]</label></h4>
    <span class="k-widget k-input k-state-default">
        <input type="text" id="urlRegex" class="textField k-input" name="urlRegex" value="@Model.UrlRegex" autocomplete="off" pattern=".*">
    </span>
    <div class="form-hint"><span>@Localizer["From which URL should this template be accessible? Here a regular expression can be specified for dynamic values and parameters. If you divide the regular expression into groups and give those groups names, then those names can be used as variables in this template. Example:"] \/product\/(?&lt;productId&gt;[0-9]+)\/</span></div>
</div>
<div class="item item-left" style="width: 60%;">
    <div class="item full-width" data-label-style="float" data-label-width="0">
        <h4><label for="combo-cache">@Localizer["Cache"]</label></h4>
        <div class="flex-container">
            <select id="combo-cache" class="combo-select" data-kendo-control="kendoDropDownList" name="useCache">
                <!option value="@((int)TemplateCachingModes.NoCaching)" @(Model.UseCache == TemplateCachingModes.NoCaching ? "selected" : "")>@Localizer["No caching"]</!option>
                <!option value="@((int)TemplateCachingModes.ServerSideCaching)" @(Model.UseCache == TemplateCachingModes.ServerSideCaching ? "selected" : "")>@Localizer["server caching full template (regardless of URL)"]</!option>
                <!option value="@((int)TemplateCachingModes.ServerSideCachingPerUrl)" @(Model.UseCache == TemplateCachingModes.ServerSideCachingPerUrl ? "selected" : "")>@Localizer["server caching full template (per SEO friendly URL different)"]</!option>
                <!option value="@((int)TemplateCachingModes.ServerSideCachingPerUrlAndQueryString)" @(Model.UseCache == TemplateCachingModes.ServerSideCachingPerUrlAndQueryString ? "selected" : "")>@Localizer["server caching full template (per SEO friendly URL + query string combination different)"]</!option>
                <!option value="@((int)TemplateCachingModes.ServerSideCachingPerHostNameAndQueryString)" @(Model.UseCache == TemplateCachingModes.ServerSideCachingPerHostNameAndQueryString ? "selected" : "")>@Localizer["server caching full template (based on full URL, including domain and query string)"]</!option>
            </select>
        </div>
        <div class="form-hint"><span>@Localizer["Should caching be enabled for this template? If yes, what kind of caching. For example, caching can be the same for all URLs, or separate cache per URL/querystring."]</span></div>
    </div>

    <div class="item" data-label-style="float" data-label-width="0">
        <h4><label for="cache-location">@Localizer["Cache location"]</label></h4>
        <div class="flex-container">
            <select id="cache-location" class="combo-select" data-kendo-control="kendoDropDownList" name="cacheLocation">
                <!option value="@((int)TemplateCachingLocations.InMemory)" @(Model.CacheLocation == TemplateCachingLocations.InMemory ? "selected" : "")>@Localizer["In memory"]</!option>
                <!option value="@((int)TemplateCachingLocations.OnDisk)" @(Model.CacheLocation == TemplateCachingLocations.OnDisk ? "selected" : "")>@Localizer["On hard disk"]</!option>
            </select>
        </div>
        <div class="form-hint"><span>@Localizer["Where should the cache be stored? In memory is the fastest, but this cache is lost when the application pool is restarted."]</span></div>
    </div>

    <div class="item" data-label-style="float" data-label-width="0">
        <h4><label for="cacheMinutes">@Localizer["Cache number of minutes"]</label></h4>
        <span class="k-widget k-input k-state-default">
            <input type="number" id="cacheMinutes" class="textField k-input" name="cacheMinutes" value="@Model.CacheMinutes" autocomplete="off">
        </span>
        <div class="form-hint"><span>@Localizer["How long should the cache be kept? If this value is 0 or less, the setting 'GCL.DefaultTemplateCacheDuration' will be used for the appsettings.json."]</span></div>
    </div>

    <div class="item" data-label-style="float" data-label-width="0">
        <h4><label for="cacheRegex">@Localizer["Cache regex"]</label></h4>
        <span class="k-widget k-input k-state-default">
            <input type="text" id="cacheRegex" class="textField k-input" name="cacheRegex" value="@Model.CacheRegex" autocomplete="off">
        </span>
        <div class="form-hint"><span>@Localizer["If a valid regex is entered here, this template will only be cached for URLs that match this regex."]</span></div>
    </div>

    <div class="item" data-label-style="float" data-label-width="0">
        <label class="checkbox">
            <input id="returnNotFoundWhenPreLoadQueryHasNoData" name="returnNotFoundWhenPreLoadQueryHasNoData" type="checkbox" @(Model.ReturnNotFoundWhenPreLoadQueryHasNoData ? "checked" : "")>
            <span>@Localizer["Return 404 status if pre-load query has no results"]</span>
        </label>
        <div class="form-hint"><span>@Localizer["If a pre-load query has been filled in below and this query does not give a result, a 404 can be shown to the visitor."]</span></div>
    </div>
</div>
<div class="item item-right" style="width: 40%;">
    <input id="isDefaultHeader" name="isDefaultHeader" type="checkbox" @(Model.IsDefaultHeader ? "checked" : "") class="hidden" />
    <label class="checkbox" for="isDefaultHeader">
        <span>@Localizer["This template is the default header"]</span>
    </label>

    <input id="isDefaultFooter" name="isDefaultFooter" type="checkbox" @(Model.IsDefaultFooter ? "checked" : "") class="hidden" />
    <label class="checkbox" for="isDefaultFooter">
        <span>@Localizer["This template is the default footer"]</span>
    </label>
    
    <div class="header-footer-regex-panel">
        <div class="item" data-label-style="float" data-label-width="0">
            <h4><label for="defaultHeaderFooterRegex">@Localizer["Header/footer regex"]</label></h4>
            <span class="k-widget k-input k-state-default">
                <input type="text" id="defaultHeaderFooterRegex" class="textField k-input" name="defaultHeaderFooterRegex" value="@Model.DefaultHeaderFooterRegex" autocomplete="off" />
            </span>
            <div class="form-hint"><span>@Localizer["If a valid regex is entered here, this header or footer will only be used for URLs that match this regex."]</span></div>
        </div>
    </div>

    <input id="loginRequired" name="loginRequired" type="checkbox" @(Model.LoginRequired ? "checked" : "") class="hidden">
    <label class="checkbox" for="loginRequired">
        <span>@Localizer["User must be logged in to view this template"]</span>
    </label>

    <div class="user-check-panel">
        <div class="item" data-label-style="float" data-label-width="0">
            <h4><label for="loginRoles">@Localizer["Roles"]</label></h4>
            <div class="flex-container">
                <select id="loginRoles" name="loginRoles" multiple="multiple" data-kendo-control="kendoMultiSelect">
                </select>
            </div>
        </div>

        <div class="item" data-label-style="float" data-label-width="0">
            <h4><label for="loginRedirectUrl">@Localizer["Redirect URL"]</label></h4>
            <span class="k-widget k-input k-state-default">
                <input type="url" id="loginRedirectUrl" class="textField k-input" name="loginRedirectUrl" value="@(Model.LoginRedirectUrl)" />
            </span>
        </div>
    </div>
</div>

<div class="item item-full">
    <h4><label for="preLoadQuery">@Localizer["Pre-load query"]</label></h4>
    <textarea rows="10" cols="30" id="preLoadQuery" data-editor-type="text/x-mysql">@Model.PreLoadQuery</textarea>
    <div class="form-hint"><span>@Localizer["This query is executed 1 time at the beginning while loading this template. The results of this query can be used elsewhere in the template with the prefix 'template.'. For example, if the query returns a 'title' column, then the variable '{template.title}' can be used anywhere in the template, including dynamic components. Only the first line of the query result can be used. This query can also be used to put SEO meta tags on the page."]</span></div>
</div>