@using System.Collections
@using System.Reflection
@using Api.Modules.Templates.Attributes
@using Api.Modules.Templates.Models.Template.WtsModels;
@model TemplateWtsConfigurationModel;
<div id="tabStripConfiguration" class="k-tabstrip-items-wrapper">
    <ul class="k-tabstrip-items k-reset" role="none">
        <li class="service-tab k-state-active" data-name="wts-service">Service</li>
        <li class="timers-tab" data-name="wts-timers">Timers</li>
        <li class="actions-tab" data-name="wts-actions">Actions</li>
        <li class="statistic-tab" data-name="wts-statistic">Statistiek</li>
        <li class="logging-tab" data-name="wts-logging">Logging</li>
    </ul>
    <div id="serviceTab">
        <div class="formview compact">
            @{RenderProperties(Model, Model.GetType(), KendoTab.Service, true);}
        </div>
    </div>
    <div id="timersTab">
        <div class="formview compact">
            @{RenderProperties(Model, Model.GetType(), KendoTab.Timers, true);}
        </div>
    </div>
    
    <div id="actionsTab">
        <div class="formview compact">
            @{RenderProperties(Model, Model.GetType(), KendoTab.Actions, true);}
        </div>
    </div>
    
    <div id="statisticTab">
        <em>Informatie over hoe lang de service erover deed
            om te draaien komt hier te staan. Liefst in een
            grafiek met de laatste x-keer dat deze gedraaid
            heeft. En of er fouten waren en zo ja welke</em>
    </div>
    <div id="loggingTab">
        <em>Hier worden de logs geopend van deze service.
            Per actie moet je de logs kunnen filteren. Tevens
            op periode filteren...</em>
    </div>
</div>

<footer>
    <div class="version-actions">
        <button id="saveAndDeployToTestButtonWtsConfiguration" class="k-primary saveButton" title="Opslaan &amp; deploy naar test-omgeving"><ins class="icon-cloud-up"></ins></button>
        <button id="saveButtonWtsConfiguration" class="k-primary saveButton">Configuratie opslaan</button>
    </div>
</footer>


@functions {
    async Task RenderProperty(object data, PropertyInfo property, WtsAttributes.WtsPropertyAttribute attributes, string selectedValue, string tab)
    {
        <div class="item">
            @switch (attributes?.KendoComponent)
            {
                case KendoComponent.TextBox:
                    <h4><label>@attributes?.Title</label></h4>
                    <span>
                        <input
                            type="text"
                            name="@property.Name"
                            value="@(data ?? "")"
                            data-kendo-tab="@tab"
                            data-kendo-component="@KendoComponent.TextBox"
                            @if (attributes.BelongsToForm != null)
                            {
                                <text>belongs-to="@attributes?.BelongsToForm"</text>
                            }
                        />
                        <div class="form-hint"><span>@attributes.Description</span></div>
                    </span>
                    break;
                case KendoComponent.NumericTextBox:
                    <h4><label>@attributes?.Title</label></h4>
                    <span>
                        <input
                            type="number"
                            name="@property.Name"
                            value="@(data ?? "")"
                            data-kendo-tab="@tab"
                            data-depends-on-field="timing-daily"
                            data-depends-on-value="daily"
                            data-kendo-component="@KendoComponent.NumericTextBox"
                            @if (attributes.BelongsToForm != null)
                            {
                                <text>belongs-to="@attributes?.BelongsToForm"</text>
                            }
                        />
                        <div class="form-hint"><span>@attributes.Description</span></div>
                    </span>
                    break;
                case KendoComponent.TimePicker:
                    <h4><label>@attributes?.Title</label></h4>
                    <span>
                        <input
                            type="time"
                            name="@property.Name"
                            value="@(data ?? "")"
                            data-kendo-tab="@tab"
                            data-kendo-component="@KendoComponent.TimePicker"
                            @if (attributes.BelongsToForm != null)
                            {
                                <text>belongs-to="@attributes?.BelongsToForm"</text>
                            }
                        />
                        <div class="form-hint"><span>@attributes.Description</span></div>
                    </span>
                    break;
                case KendoComponent.CheckBox:
                    <h4></h4>
                    <span>
                        <label class="checkbox">
                            @if (data != null && (bool)data)
                            {
                                <input 
                                    type="checkbox" 
                                    name="@property.Name" 
                                    data-kendo-tab="@tab" 
                                    checked 
                                    data-kendo-component="@KendoComponent.CheckBox"
                                    @if (attributes.BelongsToForm != null)
                                    {
                                        <text>belongs-to="@attributes?.BelongsToForm"</text>
                                    }
                                />
                            }
                            else
                            {
                                <input
                                    type="checkbox" 
                                    name="@property.Name" 
                                    data-kendo-tab="@tab" 
                                    data-kendo-component="@KendoComponent.CheckBox" 
                                    @if (attributes.BelongsToForm != null)
                                    {
                                        <text>belongs-to="@attributes?.BelongsToForm"</text>
                                    }
                                />
                            }
                            <span>@attributes?.Description</span>
                        </label>
                    </span>
                    break;
                case KendoComponent.DropDownList:
                    // Get the enum values from the property
                    var enumData = Enum.GetValues(property.PropertyType);
                    if (enumData.Length == 0) break;
                    <h4><label>@attributes?.Title</label></h4>
                    <span>
                        <select 
                            name="@property.Name" 
                            data-kendo-tab="@tab"
                            data-kendo-component="@KendoComponent.DropDownList"
                            @if (attributes.BelongsToForm != null)
                            {
                                <text>belongs-to="@attributes?.BelongsToForm"</text>
                            }
                        >
                            @foreach (var opt in enumData)
                            {
                                if (opt.ToString() == selectedValue)
                                {
                                    <option value="@opt" selected>@opt</option>
                                }
                                else
                                {
                                    <option value="@opt">@opt</option>
                                }
                            }
                        </select>
                        <div class="form-hint"><span>@attributes.Description</span></div>
                    </span>
                    break;
                case KendoComponent.Grid:
                    <h4><label>@attributes?.Title</label></h4>
                    <span>
                        <table 
                            name="@property.Name" 
                            data-kendo-component="@KendoComponent.Grid" 
                            data-kendo-tab="@tab"
                            data-kendo-options="@attributes?.KendoOptions"
                            >
                            <thead>
                                <tr>
                                    @foreach (var prop in @data.GetType().GetGenericArguments()[0].GetProperties())
                                    {
                                        <th>@prop.Name</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in (IList)data) 
                                {
                                    <tr>
                                        @foreach (var prop in @data.GetType().GetGenericArguments()[0].GetProperties())
                                        {
                                            <td>@prop.GetValue(item, null)</td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </span>
                    break;
                default:
                    <p style="color: #721c24; background-color: #f8d7da; padding: 10px; border: 3px solid #f5c6cb; border-radius: 7px;">Unknown property type: "@property.PropertyType.Name" for property: "@property.Name"</p>
                    break;
            }
        </div>
    }

    void RenderProperties(object data, Type type, string tab, bool isFilled)
    {
        foreach (var property in type.GetProperties())
        {
            var attributes = property.GetCustomAttributes(typeof(WtsAttributes.WtsPropertyAttribute), false).Cast<WtsAttributes.WtsPropertyAttribute>().FirstOrDefault();
        
            // Only render properties that have attributes and where isVisible is true
            // Or when the KendoTab is null, since that means it should be rendered on all tabs
            if (attributes != null && attributes.isVisible && attributes.KendoTab == tab || attributes != null && attributes.isVisible && attributes.KendoTab == null)
            {
                if (data is IList list)
                {
                    // Only send the data if the attribute is a dropdownlist since we need to populate the dropdownlist with all its options
                    if (attributes?.KendoComponent == KendoComponent.DropDownList)
                    {
                        // Get property value of the first item in the list
                        var value = list[0]?.GetType().GetProperty(property.Name)?.GetValue(list[0], null);
                        RenderProperty(value, property, attributes, null, tab);
                    }
                    else
                    {
                        RenderProperty(null, property, attributes, null, tab);
                    }
                }
                else
                {
                    // Check if we're sending a enum, if so also send the selected value
                    if (property.PropertyType.IsEnum)
                    {
                        if (isFilled)
                        {
                            RenderProperty(data?.GetType().GetProperty(property.Name)?.GetValue(data, null), property, attributes, data?.GetType().GetProperty(property.Name)?.GetValue(data, null).ToString(), tab);
                        }
                        else
                        {
                            RenderProperty(data?.GetType().GetProperty(property.Name)?.GetValue(data, null), property, attributes, null, tab);
                        }
                        continue;
                    }
                    // Check if we should send the data
                    if (isFilled)
                    {
                        RenderProperty(data?.GetType().GetProperty(property.Name)?.GetValue(data, null), property, attributes, null, tab);
                    }
                    else
                    {
                        RenderProperty(null, property, attributes, null, tab);
                    }
                }
            }

            // Check if property has child properties
            if (!property.PropertyType.IsClass || property.PropertyType == typeof(string)) continue;
            
            // Only render child properties if the tab is the same as what is defined in the parameter
            if (attributes != null && attributes.KendoTab != tab) continue;
                
            // Check if the property is a list
            if (property.PropertyType.IsGenericType && property.PropertyType.GetGenericTypeDefinition() == typeof(List<>))
            {
                // Get the type of the list
                var genericTypes = property.PropertyType.GetGenericArguments();
                if (!genericTypes.Any()) continue; // If there are no generic types, continue to the next property
                var listType = genericTypes[0];
                // Get the list from the data 
                var dataList = data?.GetType().GetProperty(property.Name)?.GetValue(data, null) as IList;
                RenderProperties(dataList, listType, tab, false);
            }
            else
            {
                if (data is IList list)
                {
                    // Get property value of the first item in the list
                    // TODO: See if sending this value is useless or not
                    var value = list?[0]?.GetType().GetProperty(property.Name);
                    // Since data is a list, we should let the function know that we shouldn't fill any data
                    RenderProperties(value, property.PropertyType, tab, false);
                }
                else
                {
                    // Render the properties of the class
                    RenderProperties(data?.GetType().GetProperty(property.Name)?.GetValue(data, null), property.PropertyType, tab, true);
                }
            }
        }
    }
}